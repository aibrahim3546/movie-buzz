import { IObservableArray } from "mobx";
import { IComplexType, IType, OptionalProperty } from "../../internal";
export interface IMSTArray<C, S, T> extends IObservableArray<T> {
}
export interface IArrayType<C, S, T> extends IComplexType<C[] | undefined, S[], IMSTArray<C, S, T>>, OptionalProperty {
}
/**
 * Creates an index based collection type who's children are all of a uniform declared type.
 *
 * This type will always produce [observable arrays](https://mobx.js.org/refguide/array.html)
 *
 * @example
 * const Todo = types.model({
 *   task: types.string
 * })
 *
 * const TodoStore = types.model({
 *   todos: types.array(Todo)
 * })
 *
 * const s = TodoStore.create({ todos: [] })
 * unprotect(s) // needed to allow modifying outside of an action
 * s.todos.push({ task: "Grab coffee" })
 * console.log(s.todos[0]) // prints: "Grab coffee"
 *
 * @export
 * @alias types.array
 * @param {IType<S, T>} subtype
 * @returns {IComplexType<S[], IObservableArray<T>>}
 */
export declare function array<C, S, T>(subtype: IType<C, S, T>): IArrayType<C, S, T>;
/**
 * Returns if a given value represents an array type.
 *
 * @export
 * @template IT
 * @param {IT} type
 * @returns {type is IT}
 */
export declare function isArrayType<IT extends IArrayType<any, any, any>>(type: IT): type is IT;
