import { IType, IComplexType, OptionalProperty } from "../../internal";
export declare function optional<C, S, T>(type: IComplexType<C, S, T>, defaultValueOrFunction: C | S | (() => C | S | T)): IComplexType<C | undefined, S, T> & OptionalProperty;
export declare function optional<C, S, T>(type: IType<C, S, T>, defaultValueOrFunction: C | S | (() => C | S | T)): IType<C | undefined, S, T> & OptionalProperty;
/**
 * Returns if a value represents an optional type.
 *
 * @export
 * @template IT
 * @param {IT} type
 * @returns {type is IT}
 */
export declare function isOptionalType<IT extends IType<any | undefined, any, any> & OptionalProperty>(type: IT): type is IT;
